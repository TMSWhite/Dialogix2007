/* ********************************************************  ** Copyright (c) 2000-2005, Thomas Maxwell White, all rights reserved.  ** $Header$ ******************************************************** */package org.dialogix.parser;import java.util.logging.*;import java.text.*;import java.util.*;/** Helper class with X main interfaces:(1) DataAccessObject pattern -- so can store data in database, hashtable, or other runtime-configurable DataSource(2) LocalAccessObject -- like DAO, letting Locale be specified in DB or Java properties file.  This should give access to internationalized formats even if the minimal JRE is intalled */public class Context implements java.io.Serializable {    private Logger logger = Logger.getLogger("org.dialogix.parser.Context");    /* */    /* FIXME:  Should the following locale-related functions be part of Context, DatumMath, Locale, or something else? */    /* */    private static final Locale defaultLocale = Locale.getDefault();    private static final String BUNDLE_NAME = "org.dialogix.parser.DialogixBundle";    private static final String DEFAULT = "null";    private ResourceBundle bundle = null;    private Locale locale = defaultLocale;    private DataAccessObject dao;    private LocaleAccessObject lao;    /**    This NULL context is the default    XXX:  Can it be removed, making Datum calls require Context to be passed to them?     *///    static public Context NULL = new Context(); //  CONCURRENCY RISK?    /**    Create new Context, with default Access Objects for Data and Locale     */    public Context() {        dao = new DataAccessObject();        lao = new LocaleAccessObject();        loadBundle();	// XXX: Shouldn't this be done elsewhere?    }    public DataAccessObject getDAO() {        return dao;    }    public LocaleAccessObject getLocale() {        return lao;    }    /**    Get a formmated string according the to current Locale    @param s  The message string    @return The formmated result     */    public String get(String s) {        return s;    }    /**    Given a context and object, returns the value of the parameter (optionally dereferencing a variable name).    This is especially used for functions with UNLIMITED arguments.    @param context  The Context    @param o  The parameter extracted from the argument list    @return  The Datum holding the value    @see Context    @see Datum     */    public Datum getParam(Object o) {        if (o == null) {            return new Datum(Datum.INVALID, true);        } else if (o instanceof String) {            return this.getDAO().getDatum((String) o);        } else {            return (Datum) o;        }    }    /* */    /* FIXME:  These are navigation functions -- should be elsewhere */    /* */    void gotoFirst() {    }    void jumpToFirstUnasked() {    }    void gotoPrevious() {    }    void resetEvidence() {    }    void gotoNext() {    }    /**    Return the desired Locale    @param  lang  the language specifier    @param  country the country specifier    @param  extra the dialect specifier    @return the associated Locale object     */    public static Locale getLocale(String lang,                                     String country,                                     String extra) {        return new Locale((lang == null) ? "" : lang,            (country == null) ? "" : country,            (extra == null) ? "" : extra);    }    /**    Set the Locale for this context, loading new bundles as needed    @param  loc the Locale     */    public void setLocale(Locale loc) {        locale = (loc == null) ? defaultLocale : loc;        loadBundle();    }    /**    Load the Locale resources from the properties bundle.      XXX:  This should be done via LocaleAccessObject     */    private void loadBundle() {        try {            bundle = PropertyResourceBundle.getBundle(BUNDLE_NAME, (locale == null) ? defaultLocale : locale);        } catch (MissingResourceException t) {            logger.log(Level.SEVERE,"error loading resources '" + BUNDLE_NAME + "': " + t.getMessage());        } catch (Error e) {            logger.log(Level.SEVERE,e.getMessage(), e);        }    }}