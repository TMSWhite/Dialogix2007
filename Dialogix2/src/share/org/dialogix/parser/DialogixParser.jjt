/* ******************************************************** 
** Copyright (c) 2000-2005, Thomas Maxwell White, all rights reserved. 
** $Header$
******************************************************** */ 

options {
  LOOKAHEAD=1;
  STATIC=false;  
  MULTI=true;
  VISITOR=true;
}


PARSER_BEGIN(DialogixParser)

package org.dialogix.parser;
import java.io.*;
import java.util.*;
import org.apache.log4j.Logger;

/**
  This is the main function for implementing the JavaCC and JJTree-based parser.
  It is a subset of C designed to only process Statements.
  It is specifically geared to use Datum objects, which are loosely typed, but also store special Missing value options.
  
  Usage:
  (1) Call init or ReInit functions, which specify the equation, which will come from an input source (a form of Reader)
  (2) Call parse function to evaluate the selected equation and return a Datum
  (3) Optionally call getErrors() to see any syntax errors
  (4) Optionally call getDependencies() to see which variables are references within the equation
  
  
  TODO:  Can this be implemented as a Pool of parsers?
  TODO:  Can the logging be Context specific to show equatation specific error messages?  (Rather than using ArrayList of errorMessages?)
  
  @see Datum
*/

public class DialogixParser implements Serializable   {
  private Stack stack;
  private Context context;
  static Logger logger = Logger.getLogger(DialogixParser.class);  /* XXX:  Do I need way to have context-specific logger? */
  private Hashtable dependencies;  // list of variables from this equation
  private ArrayList errorMessages;
  
  /**
    The main function for evaluating the desired equation(s).
    
    @param  ctx  The context
    @return The Datum representing the result of parsing the equation
  */
  public Datum parse(Context ctx) {
    context = ctx;
    Datum d = null;

    try {
      stack = new Stack();
      dependencies = new Hashtable();
      errorMessages = new ArrayList();
      Statement();
      d = (Datum) stackPop();
    }
    catch (EmptyStackException e) {
      error(context.get("stack_underflow"),token.beginLine,token.beginColumn);
      }
    catch (ParseException e) {
      error("ParseException @ DialogixParser.parse()" + e.getMessage());
    }
    catch (TokenMgrError e) {
      error("TokenMgrError @ DialogixParser.parse()" + e.getMessage());
    }
    
    if (logger.isDebugEnabled()) {
      debug(null,d);
    }

    return ((d != null) ? d : Datum.getInstance(context,Datum.INVALID));
  }

  /**
    @return The list of errors, if any
  */
  public Collection getErrors() { 
    return errorMessages; 
  }
  
  /**
    @return The number of syntax errors found, if any
  */
  public int numErrors() { 
    return errorMessages.size(); 
  }
  
  /**
    @return The list of variable names used in this equation, if any
  */
  public Collection getDependencies() { 
    ArrayList al = new ArrayList(dependencies.values());
    Collections.sort(al);
    return al;
  }
  
  /**
    @return The number of variable names used within the equation
  */
  public int numDependencies() { 
    return dependencies.size(); 
  }

  /**
    Log an error message
    
    @param  s The error message
  */
  private void error(String s) { 
    logger.error(s);
  }
  
  /**
    Log an error message, including line number
    
    @param  s The message
    @param  line  The line number
    @param  column  The column number at which the error occured
  */
  private void error(String s, int line, int column) {
    String msg = "[" + line + ":" + column + "]" + s;
    logger.error(msg);
    errorMessages.add(msg);
  }

  /**
    Prints stack trace in tab delimited format - operator, arguments, ->, answer
    
    @param  s The message
    @param  d The Datum value containing the answer
  */
  private void debug(String s,Datum d) {
    if (logger.isDebugEnabled()) {
      if (d == null) {
        logger.debug(s + "[null Datum]");
      }
      else {
        String varName = d.getName();
        
        logger.debug(((s != null) ? (s + "\t") : "") + "->\t" +
              "'" + d.stringVal(true) + "'\t" + 
              d.doubleVal() + "\t" + 
              d.dateVal() + "\t" + 
              d.monthVal() + "\t" +
              ((varName != null) ? ("VAR_NAME='" + varName + "'") : ""));
      }
    }
  }

  /**
    Returns a formated view of the Datum's value.
    
    @param  d The Datum
    @return The formatted value
    @see Datum
  */
  private String datumValue(Datum d) {
    String varName = d.getName();
    if (varName == null)
      return d.stringVal(true);
    else
      return ("(" + varName + "," + d.stringVal(true) + ")");
  }

  /**
    Returns the name of the operator used to parse the equation, for debugging purposes.
    
    @param  op  The operator
    @return The human-readable name of the operator
  */
  private String opName(int op) {
    return tokenImage[op].substring(1,tokenImage[op].length()-1);
  }
  
  /**
    Process an unary operator (+,-,!), pushing the result on the stack.
    
    @param  op  The operator
    @param  arg1  it's argument
  */
  private void unaryOp(int op, Object arg1) {
    Datum a = getParam(arg1);
    Datum ans = null;
    switch(op) {
      case PLUS: ans = a; break;
      case MINUS: ans = DatumMath.neg(a); break;
      case NOT: ans = DatumMath.not(a); break;
      default: ans = Datum.getInstance(context,Datum.INVALID); break;
    }
    stackPush(ans);

    if (logger.isDebugEnabled()) {
      debug(opName(op) + "\t" + datumValue(a),ans);
    }
  }

  /**
    Safely get a Datum, returning INVALID if it is null.
    
    @param  o The parameter
  */
  private Datum getParam(Object o) {
    if (o == null)
      return Datum.getInstance(context,Datum.INVALID);
    return (Datum) o;
  }

  /**
    Process a binary operator (+,-,*,/,>, etc., pushing the result on the stack
    
    @param  op  The operator
    @param  arg2  The right hand side of the equation
    @param  arg1  The left hand side of the equation
  */
  private void binaryOp(int op, Object arg2, Object arg1) {
    Datum a = getParam(arg1);
    Datum b = getParam(arg2);
    Datum ans = null;
    switch(op) {
      case PLUS: ans = DatumMath.add(a,b); break;
      case MINUS: ans = DatumMath.subtract(a,b); break;
      case MULTIPLY: ans = DatumMath.multiply(a,b); break;
      case DIVIDE: ans = DatumMath.divide(a,b); break;
      case GT: ans = DatumMath.gt(a,b); break;
      case GE: ans = DatumMath.ge(a,b); break;
      case EQ: ans = DatumMath.eq(a,b); break;
      case NEQ: ans = DatumMath.neq(a,b); break;
      case LT: ans = DatumMath.lt(a,b); break;
      case LE: ans = DatumMath.le(a,b); break;
      case CONCATENATE: ans = DatumMath.concat(a,b); break;
      case ANDAND: ans = DatumMath.andand(a,b); break;
      case OROR: ans = DatumMath.oror(a,b); break;
      case MODULUS: ans = DatumMath.modulus(a,b); break;
      case XOR: ans = DatumMath.xor(a,b); break;
      case AND: ans = DatumMath.and(a,b); break;
      case OR: ans = DatumMath.or(a,b); break;
      case ASSIGN: context.getDAO().set(a.stringVal(),b); ans = context.getDAO().getDatum(a.stringVal()); break;
      default: ans = Datum.getInstance(context,Datum.INVALID); break;
    }
    stackPush(ans);
    
    if (logger.isDebugEnabled()) {
      debug(opName(op) + "\t" + datumValue(a) + "\t" + datumValue(b),ans);
    }
  }

  /**
    Process a ternary operator, like (eqn) ? true : false, pushing the result on the stack
    
    @param  op  The operator
    @param  arg3  The 3rd argument
    @param  arg2  The 2nd argument
    @param  arg1  The 1st argument
  */
  private void trinaryOp(int op, Object arg3, Object arg2, Object arg1) {
    Datum a = getParam(arg1);
    Datum b = getParam(arg2);
    Datum c = getParam(arg3);
    Datum ans = null;
    switch(op) {
      case QUEST: ans = DatumMath.conditional(a,b,c); break;
      default: ans = Datum.getInstance(context,Datum.INVALID); break;
    }
    stackPush(ans);

    if (logger.isDebugEnabled() ) {
      debug(opName(op) + "\t" + datumValue(a) + "\t" + datumValue(b) + "\t" + datumValue(c),ans);
    }
  }
  
  /**
    Perform a function on a stack of arguments, pushing the result on the stack
    
    @param  func  The requested function
    @param  params  The stack of parameters
  */
  private void functionOp(Token func, Stack params) {
    Datum ans = context.getDAO().function(context,func.image, params, func.beginLine, func.beginColumn);
    stackPush(ans);

    if (logger.isDebugEnabled() ) {
      StringBuffer sb = new StringBuffer("function\t" + func.image);
      for (int i=0;i<params.size();++i) {
        Object o = params.elementAt(i);
        if (o == null)
          sb.append("\tnull");
        else if (o instanceof Datum)
          sb.append("\t" + datumValue((Datum) o));
        else if (o instanceof String)
          sb.append("\t" + (String) o);
        else
          sb.append("\t" + o.getClass());
      }
      debug(sb.toString(), ans);
    }
  }
  
  /**
    Push an operator, Datum, or function onto the stack, optionally logging it to the debugger
    
    @param  obj The object to push on the stack
  */
  private void stackPush(Object obj) {
    debug("Push",(Datum) obj);
    stack.push(obj);
  }
  
  /**
    Pop an operator, Datum, or function from the stack, optionally logging it to the debugger
    
    @return The object
  */
  private Object stackPop() {
    Object obj = stack.pop();
    debug("Pop", (Datum) obj);
    return obj;
  }
}

PARSER_END(DialogixParser)


TOKEN :
{
  < CHARACTER_LITERAL:
    "'"
    (  (~["'","\\","\n","\r"])
    | ("\\"
      ( ["n","t","b","r","f","\\","'","\""]
      )
      )
    )*
    "'"
  >
|
  < STRING_LITERAL:
    "\""
    (  (~["\"","\\","\n","\r"])
    | ("\\"
      ( ["n","t","b","r","f","\\","'","\""]
      )
      )
    )*
    "\""
  >
}

TOKEN : /* unary operatorrs */
{
  < PLUS: "+" >
|  < MINUS: "-" >
|  < NOT: "!" >

}

TOKEN : /* binary operators */
{
/* |  < PLUS: "+" > */
/* |  < MINUS: "-" > */

  < MULTIPLY: "*" >
|  < DIVIDE: "/" >
|  < GT: ">" | "gt" >
|  < GE: ">=" | "ge" >
|  < EQ: "==" | "eq" >
|  < NEQ: "!=" | "ne" >
|  < LT: "<" | "lt" >
|  < LE:  "<=" | "le" >
|  < CONCATENATE: "." >
|  < ANDAND: "&&" | "and" >
|  < OROR: "||" | "or" >
|  < MODULUS: "%" | "mod" >
|  < XOR: "^" | "xor" >
|  < AND: "&" | "binaryAnd" >
|  < OR: "|" | "binaryOr" >
|  < ASSIGN: "=" >
}

TOKEN : /* ctxnary operators */
{
  < QUEST: "?" >
|  < COLON: ":" >
}

TOKEN : /* separator characters */
{
  < COMMA: "," >
|  < LP: "(" >
|  < RP: ")" >
|  < LSB: "[" >
|  < RSB: "]" >
|  < LCB: "{" >
|  < RCB: "}" >
|  < SEMICOLON: ";" >
}

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : /* numeric constants */
{
  <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> >
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
}

TOKEN : /* Function names */
{
  <  NMTOKEN:  ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
|  < EOL: "\n" >
}

/**
  Process a statement
*/
void Statement() : {}
{
  Expressions()
|  <SEMICOLON>
|  <EOL>
|  <EOF>
}

/**
  Process a set of expressions
*/
void Expressions() : {}
{
  Expression()
    (
      <COMMA>  Expression()
        {
          Object value = stackPop();
          stackPop();  /* throw away the penultimate item on the stack */
          stackPush(value);
        }
    )*
}

/**
  Process a single expression, including conditionals
*/
void Expression() : {}
{
  LOOKAHEAD(2) AssignmentExpression()
|  ConditionalExpression()
}


/**
  Process "a = result"
*/
void AssignmentExpression(): { Token t; }
{
  <NMTOKEN> { t = token; } <ASSIGN> ConditionalExpression()
    {
      binaryOp(ASSIGN,stackPop(), new Datum(context, t.image,Datum.STRING));
      dependencies.put(t.image,t.image);
    }
}

/**
  Process "(exp) ? true : false"
*/
void ConditionalExpression() : {}
{
  LogicalORExpression()
    (
      <QUEST> LogicalORExpression() <COLON> LogicalORExpression()
        { trinaryOp(QUEST,stackPop(),stackPop(),stackPop()); }
    )*
}

/**
  Process "a || b"
*/
void LogicalORExpression() : {}
{
  LogicalANDExpression()
    (
      <OROR> LogicalANDExpression()
        { binaryOp(OROR,stackPop(),stackPop()); }
    )*
}

/**
  Process "a && b"
*/
void LogicalANDExpression() : {}
{
  InclusiveORExpression()
    (
      <ANDAND> InclusiveORExpression()
        { binaryOp(ANDAND,stackPop(),stackPop()); }
    )*
}

/**
  Process an expression like "a || b"
*/
void InclusiveORExpression() : {}
{
  ExclusiveORExpression()
    (
      <OR> ExclusiveORExpression()
        { binaryOp(OR,stackPop(),stackPop()); }
    )*
}

/**
  Process "a | b"
*/
void ExclusiveORExpression() : {}
{
  ANDExpression()
    (
      <XOR> ANDExpression()
        { binaryOp(XOR,stackPop(),stackPop()); }
    )*
}

/**
  Process "a & b"
*/
void ANDExpression() : {}
{
  EqualityExpression()
    ( LOOKAHEAD(2)
      <AND> EqualityExpression()
        { binaryOp(AND,stackPop(),stackPop()); }
    )*
}

/**
  Process "a == b"
*/
void EqualityExpression() : { Token op; }
{
  RelationalExpression()
    (
      ( <EQ> | <NEQ> ) { op = token; } RelationalExpression()
        { binaryOp(op.kind,stackPop(),stackPop()); }
    )*
}

/**
  Process "a op b" where op in {lt, gt, le, ge)
*/
void RelationalExpression() : { Token op; }
{
  AdditiveExpression()
    (
      ( <LT> | <GT> | <LE> | <GE> ) { op = token; } AdditiveExpression()
        { binaryOp(op.kind,stackPop(),stackPop()); }
    )*
}

/**
  Process "a op b" where op in (+,-,concatenate)
*/
void AdditiveExpression() : { Token op; }
{
  MultiplicativeExpression()
    ( LOOKAHEAD(2)
      ( <PLUS> | <MINUS> | <CONCATENATE> ) { op = token;} MultiplicativeExpression()
        { binaryOp(op.kind,stackPop(),stackPop()); }
    )*
}

/**
  Process "a op b" where op in (*,/)
*/
void MultiplicativeExpression() : { Token op; }
{
  UnaryExpression()
    ( LOOKAHEAD(2)
      ( <MULTIPLY> | <DIVIDE> ) { op = token; } UnaryExpression()
        { binaryOp(op.kind,stackPop(),stackPop()); }
    )*
}

/**
  Process "op a" where op in (+,-,!)
*/
void UnaryExpression() : { Token op; }
{
  (<PLUS> | <MINUS> | <NOT>) { op = token; } PrimaryExpression()
    { unaryOp(op.kind,stackPop()); }
|  PrimaryExpression()
}

/**
  Process an expression, including functions
*/
void PrimaryExpression() : { }
{
  LOOKAHEAD(2) Function()
|  Constant()
|  <NMTOKEN>
    {
      Datum d = context.getDAO().getDatum(token.image);
      if (d == null) {
        error(context.get("undefined_variable") + " '" + token.image + "'", token.beginLine, token.beginColumn);
        stackPush(Datum.getInstance(context,Datum.INVALID));
      }
      else {
        stackPush(d);
      }
      dependencies.put(token.image,token.image);  // pushes the name of the variables references within the equation.
    }
|  <LP> Expressions() <RP>
|  <LCB> Expressions() <RCB>
|  <LSB> Expressions() <RSB>
}

/**
  Process a constant, including strings
*/
void Constant() : { }
{
  ( <INTEGER_LITERAL> |<FLOATING_POINT_LITERAL> )
    { stackPush(new Datum(context, token.image,Datum.NUMBER)); }
|  ( <STRING_LITERAL> | <CHARACTER_LITERAL> )
    {
      /* replace special characters before storing value */
      StringBuffer sb = new StringBuffer();
      char c;
      int i=0;

      try {
        for (i=1;i<token.image.length()-1;++i) {
          c = token.image.charAt(i);
          if (c == '\\') {
            c = token.image.charAt(++i);
            switch (c) {
              case 'b': sb.append('\b'); break;
              case 'f': sb.append('\f'); break;
              case 'n': sb.append('\n'); break;
              case 'r': sb.append('\n'); break;
              case 't': sb.append('\t'); break;
              case '\'': sb.append('\''); break;
              case '\"': sb.append('\"'); break;
              case '\\': sb.append('\\'); break;
              default: sb.append(c); break;
            }
          }
          else {
            sb.append(c);
          }
        }
      }
      catch (IndexOutOfBoundsException e) {
        error(context.get("unterminated_escaped_character"), token.beginLine, token.beginColumn + i);
      }

      stackPush(new Datum(context, sb.toString(),Datum.STRING));
    }
}

/**
  Process a function, passing the FunctionParameters as a stack to Functions.function
*/
void Function() : { Token t; Stack params; }
{
  <NMTOKEN> { t = token; } <LP> ( params = FunctionParameters()) <RP>
    {
      functionOp(t,params);
    }
}

/**
  Assemble the stack of function parameters.
  
  @return The stack of parameters
*/
Stack FunctionParameters() : { Stack params = new Stack(); }
{
  Expression()
    { params.push(stackPop()); }
  (
    "," Expression()
      { params.push(stackPop()); }
  )*
    { return params; }
|  /* empty */
  { return params; }
}
